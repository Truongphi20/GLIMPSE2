I"&<h1 class="no_toc text-center" id="required-libraries">Required libraries</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of contents</h2>

<ol id="markdown-toc">
  <li><a href="#required-libraries-1" id="markdown-toc-required-libraries-1">Required libraries</a>    <ol>
      <li><a href="#htslib" id="markdown-toc-htslib">HTSlib</a></li>
      <li><a href="#boost" id="markdown-toc-boost">Boost</a></li>
      <li><a href="#additional-libraries" id="markdown-toc-additional-libraries">Additional libraries</a></li>
    </ol>
  </li>
</ol>

<hr />

<h2 id="required-libraries-1">Required libraries</h2>
<p>GLIMPSE2 requires several libraries installed on the system. Here we assume most of the libraries are available, and we focus on two main libraries:</p>

<ul>
  <li>HTSlib version &gt;= 1.7: A C library for reading/writing high-throughput sequencing data.</li>
  <li>BOOST version &gt;= 1.65: A set of peer-reviewed portable C++ source libraries. GLIMPSE2 uses two specific BOOST libraries: <code class="language-plaintext highlighter-rouge">iostreams</code> and <code class="language-plaintext highlighter-rouge">program_options</code>.</li>
</ul>

<h3 id="htslib">HTSlib</h3>
<p>Building HTSlib is straightforward and does not require root privileges. Please refer to the <a href="http://www.htslib.org/">HTSlib</a> documentation for complete details. Here we provide a basic script to install HTSlib v1.16:</p>

<div class="code-example">
  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/samtools/htslib/releases/download/1.16/htslib-1.16.tar.bz2
<span class="nb">tar</span> <span class="nt">-xf</span> htslib-1.16.tar.bz2
<span class="nb">mv </span>htslib-1.16 htslib
<span class="nb">cd </span>htslib
autoheader<span class="p">;</span> autoconf<span class="p">;</span> ./configure<span class="p">;</span> <span class="c">#optional</span>
make
</code></pre></div>  </div>
</div>

<p>After this, you’ll find the libhts.a inside your current directory and the include files inside subdirectory: <code class="language-plaintext highlighter-rouge">./include/</code></p>

<h3 id="boost">Boost</h3>
<p>As GLIMPSE2 only requires few of the boost libraries, we’ll build the smallest possible boost build, without requiring root privileges. Please refer to the <a href="https://www.boost.org/doc/libs/1_73_0/more/getting_started/unix-variants.html#easy-build-and-install">Boost installation instructions</a> for complete details. Here we provide a basic script to the minimal build of Boost v1.73.0 required to run GLIMPSE2:</p>

<div class="code-example">
  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://boostorg.jfrog.io/artifactory/main/release/1.73.0/source/boost_1_73_0.tar.bz2
<span class="nb">tar</span> <span class="nt">--bzip2</span> <span class="nt">-xf</span> boost_1_73_0.tar.bz2
<span class="nb">cd </span>boost_1_73_0
./bootstrap.sh <span class="nt">--with-libraries</span><span class="o">=</span>iostreams,program_options <span class="nt">--prefix</span><span class="o">=</span>../boost <span class="c">#where ../boost is your custom boost installation prefix</span>
./b2 <span class="nb">install
cd</span> ../boost <span class="c">#change this to the folder you used as --prefix for the bootstrap script</span>
</code></pre></div>  </div>
</div>

<p>After this, you will also find a copy of the Boost headers in the include/ subdirectory of the installation prefix (our current directory). The Boost static libraries (<code class="language-plaintext highlighter-rouge">libboost_iostreams.a</code> and <code class="language-plaintext highlighter-rouge">libboost_program_options.a</code>) are found in the subfolder <code class="language-plaintext highlighter-rouge">./lib/</code> of your installation prefix.</p>

<h3 id="additional-libraries">Additional libraries</h3>

<p>Make sure that the following standard library flags can be used by g++ on your system:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-lz</code>,<code class="language-plaintext highlighter-rouge">-lbz2</code> and <code class="language-plaintext highlighter-rouge">-llzma</code> for reading/writing compressed files.</li>
  <li><code class="language-plaintext highlighter-rouge">-lm</code> for basic math operations.</li>
  <li><code class="language-plaintext highlighter-rouge">-lpthread</code> for multi-threading</li>
</ul>

<p>You can do so by checking the outcome of the following commands:</p>
<div class="code-example">
  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>locate <span class="nt">-b</span> <span class="s1">'\libz.so'</span>
locate <span class="nt">-b</span> <span class="s1">'\libbz2.so'</span>
locate <span class="nt">-b</span> <span class="s1">'\liblzma.so'</span>
locate <span class="nt">-b</span> <span class="s1">'\libm.so'</span>
locate <span class="nt">-b</span> <span class="s1">'\libpthread.so'</span>
locate <span class="nt">-b</span> <span class="s1">'\libcurl.so'</span>
</code></pre></div>  </div>
</div>

:ET