<!doctype html>
<html lang="en">

<head>
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-162723563-1"></script>
	<script>
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js', new Date());
		gtag('config', 'UA-162723563-1');
	</script>

	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
		
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="srubinac" >

    <title>GLIMPSE</title>
    <link rel="icon" href="images/branding/glimpse_icon.png">
    
    <!-- Bootstrap core CSS -->
    <link href="./css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap theme -->
    <link href="./css/bootstrap-theme.min.css" rel="stylesheet">
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <link href="./css/ie10-viewport-bug-workaround.css" rel="stylesheet">
    <!-- JQuery -->
    <script type="text/javascript" src="./script/jquery-1.12.4.min.js"></script>
    <script type="text/javascript" src="./script/bootstrap.min.js"></script>
    <script type="text/javascript" src="./script/docs.min.js"></script>
    <!-- chart JS -->
   	<script type="text/javascript" src="script/Chart.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script type="text/javascript" src="./script/ie10-viewport-bug-workaround.js"></script>
	<!-- Custom styles for this template -->
    <link href="./css/theme.css" rel="stylesheet">
    <!-- Script to load navbar code -->
	<script>
		$(function() {
			$("#navbarbox").load("navbar.html");
		});
    </script> 
</head>

<body>

	<!-- NAVBAR -->
	<nav class="navbar navbar-inverse navbar-fixed-top">
	<div class="container" id="navbarbox"></div>
    </nav>
    
    <!-- CONTENT -->
    <div class="container theme-showcase" role="main">
    
	<div class="page-header">
		<h1>Building GLIMPSE</h1>
	</div>
		<!-- <div class="well"> -->
			<h3>1. System requirements</h3>
			<p>GLIMPSE is a set of C++ tools covering the full process of imputation from low-coverage BAM files to imputed genotypes.
			In order to compile, we require a modern Linux operating system and a version of GCC > 4.4. We recommend to use the latest available version for your system.</p>
			<p>For example running the following instruction on Ubuntu 20.04 focal:</p>
			<p style="text-indent:-5px ! important;"><code>sudo apt install build-essential</code></p>
			<p>will install the GNU g++ compiler version 9.2. To check the version of your  g++ compiler, simply run:</p>
			<p style="text-indent:-5px ! important;"><code>g++ --version</code></p>
		<!-- </div> -->
<!-- 		<div class="well"> -->
			<h3>2. Required libraries</h3>	
			<p>GLIMPSE requires two libraries installed on the system:</p>
			<ol>
				<li><a href="http://www.htslib.org/">HTSlib</a> version <b>>= 1.7</b>: A C library for reading/writing high-throughput sequencing data.</li>
				<li><a href="https://www.boost.org/">BOOST</a> version <b>>= 1.65</b>: A set of peer-reviewed portable C++ source libraries. GLIMPSE uses two specific BOOST libraries: iostreams and program_options.</li>
			</ol>
			<div class="well">
				<h3>2.1 Building HTSlib</h3>
				<p>Building HTSlib is straightforward and does not require root privileges. Please refer to the <a href="http://www.htslib.org/">HTSlib</a> documentation for complete details. Here we provide a basic script to install HTSlib v1.11:</p>
				<p style="text-indent:-5px ! important;">
				<code>
				wget https://github.com/samtools/htslib/releases/download/1.11/htslib-1.11.tar.bz2<br>
				tar -xf htslib-1.11.tar.bz2<br>
				mv htslib-1.11 htslib<br>
				cd htslib<br>
				autoheader; autoconf; ./configure; #optional<br>
				make
				</code>
				</p>
				<p>After this, you'll find the libhts.a inside your current directory and the include files inside subdirectory: <code>./include/</code></p>
			</div>
			<div class="well">
				<h3>2.2 Building Boost</h3>
				<p>As GLIMPSE only requires few of the boost libraries, we'll build the smallest possible boost build, without requiring root privileges. 
				Please refer to the <a href="https://www.boost.org/doc/libs/1_73_0/more/getting_started/unix-variants.html#easy-build-and-install">Boost installation instructions</a> for complete details. 
				Here we provide a basic script to the minimal build of Boost v1.73.0 required to run GLIMPSE:</p>

				<p style="text-indent:-5px ! important;">
				<code>
				wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.bz2<br>
				tar --bzip2 -xf boost_1_73_0.tar.bz2<br>
				cd boost_1_73_0<br>
				./bootstrap.sh --with-libraries=iostreams,program_options --prefix=<b>../boost</b> #where <b>../boost</b> is your custom boost installation prefix<br>
				./b2 install<br>
				cd <b>../boost</b> #change this to the folder you used as --prefix for the bootstrap script
				</code>
				</p>
				<p>After this, you will also find a copy of the Boost headers in the include/ subdirectory of the installation prefix (our current directory). The Boost static libraries (<code>libboost_iostreams.a</code> and <code>libboost_program_options.a</code>) are found in the subfolder <code>./lib</code> of your installation prefix.</p>
				
				<p>In the case there are problems finding the correct boost paths or with the boost installation, you can find additional instructions here: <a href="https://github.com/odelaneau/GLIMPSE/issues/5#issuecomment-620900491">here</a>.</p>			
			</div>
						
			<div class="well">
				<h3>2.3 Additional libraries</h3>
				<p>Make sure that the following standard library flags can be used by g++ on your system:</p>
				<ul>
					<li><code>-lz</code>, <code>-lbz2</code> and <code>-llzma</code> for reading/writing compressed files.</li>
					<li><code>-lm</code> for basic math operations.</li>
					<li><code>-lpthread</code> for multi-threading.</li>
				</ul>
				<p>You can do so by checking the outcome of the following commands:</p>
				<code>locate -b '\libz.so'</code><br>
				<code>locate -b '\libbz2.so'</code><br>
				<code>locate -b '\liblzma.so'</code><br>
				<code>locate -b '\libm.so'</code><br>
				<code>locate -b '\libpthread.so'</code><br>
				<code>locate -b '\libcurl.so'</code><br>
			</div>
			
<!-- 		<div class="well"> -->
			<h3>3. Building GLIMPSE</h3>	
			<p>Download the last version of the GLIMPSE code using:</p>
			<code>git clone https://github.com/odelaneau/GLIMPSE.git</code>
			<p>Navigate to the downloaded folder using <code>cd GLIMPSE</code>.</p>
			<p>You'll find there a folder containing all the software packages are other utility folders:</p>
			<ul>
				<li><code>docs</code>: source code of this website.</li>
				<li><code>maps</code>: genetic maps for human taken from HapMap.</li>
				<li><code>tutorial</code>: folder with the tutorial.</li>
				<li><code>README.md</code>: front page of the GitHub.</li>
				<li><code>LICENSE</code>: copy of the MIT license.</li>
				<li><code>makefile</code> Makefile to compile all the programs at once, by recursively calling all the makefiles of the projects.</li>
			</ul>
			<p>Each software in the suite contains the same folder structure:</p>
			<ul>
				<li><code>bin</code>: folder for the compiled binary.</li>
				<li><code>obj</code>: folder with all binary objects.</li>
				<li><code>src</code>: folder with source code.</li>
				<li><code>makefile</code> Makefile to compile the program.</li>
			</ul>
			<p>In order to compile a specific tool of the suite, for example <i>GLIMPSE_phase</i>, go in directory of the software (<code>cd phase</code>) and edit the specific <code>makefile</code> at lines 26-32 (desktop) so that the following variables are correctly set up (look at the paths already there for an example):</p>
			<ul>
				<li><code>HTSSRC</code> (line 26): path to the root of the HTSlib library, the prefix for HTSLIB_INC and HTSLIB_LIB paths,</li>
				<li><code>HTSLIB_INC</code> (line 27): path to the HTSlib header files,</li>
				<li><code>HTSLIB_LIB</code> (line 28): path to the static HTSlib library (file <code>libhts.a</code>),</li>
				<li><code>BOOST_INC</code> (line 29): path to the BOOST header files (often <code>/usr/include</code>),</li>
				<li><code>BOOST_LIB_IO</code> (line 30): path to the static BOOST <i>iostreams</i> library (file <code>libboost_iostreams.a</code>),</li>
				<li><code>BOOST_LIB_PO</code> (line 31): path to the static BOOST <i>program_options</i> library (file <code>libboost_program_options.a</code>),</li>
			</ul>
			<p>If installed at the system level, static libraries (<i>*.a</i> files) can be located with this command:</p>
			<code>locate libboost_program_options.a libboost_iostreams.a libhts.a</code>

			<p>Once all paths correctly set up, proceed with the compilation using <code>make</code>. The binary can be found in the <code>bin/</code> folder and will have a name similar to <code>GLIMPSE_phase</code>. 
			You will need to copy the modified makefile in each tool (folder) of the GLIMPSE toolsuite</p>
<!-- 		</div> -->
		
		<div class="well">
			<h3>3.1 Static binaries</h3>	
			<p>In the case the installation is unsuccessful, static binaries (for Ubuntu x64 systems) of the latest release version are available in the static_bins folder. The binaries are just meant to make GLIMPSE available in systems where the dependencies are
			unavailable or difficult to install, but we <b>strongly</b> recommend to compile the working version and do not rely on static binaries, since binaries can suffer of a performance decrease.</p>
	   </div>		
    </div> <!-- /container -->
    

	
 <footer class="footer">
      <div class="container" style="text-align: center;">
        <span class="text-muted">Copyright Â© 2020 University of Lausanne | All Rights Reserved</span>
      </div>
</footer>

